{"version":3,"sources":["styles/dimensions.js","component/Layout.js","component/Map.js","component/Autosearch.js","component/InputPanel.js","pages/index.js","App.js","serviceWorker.js","index.js"],"names":["dimensions","maxwidthDesktop","maxwidthTablet","maxwidthMobile","paddingHorizontalDesktop","paddingHorizontalTablet","paddingHorizontalMobile","Body","styled","div","Layout","children","DisplayMapClass","setMap","group","platform","mapRef","useRef","useEffect","H","window","defaultLayers","createDefaultLayers","map","Map","current","vector","normal","center","lat","lng","zoom","pixelRatio","devicePixelRatio","mapevents","Behavior","MapEvents","ui","UI","createDefault","addObject","ref","style","height","Input","input","SuggestionContainer","Option","Autosearch","placeholder","id","handleLocation","useState","display","setDisplay","setInput","suggestion","setSuggestion","wrapperRef","service","Platform","apikey","process","getSearchService","handleClickOutside","event","wrap","contains","target","addEventListener","removeEventListener","onClick","onChange","preventDefault","value","length","autosuggest","q","at","result","items","handleSearch","type","index","title","handleSelect","key","Submit","GetPath","button","InputPanel","handleSubmit","handleDisplayPath","loading","location","order","onSubmit","i","Grid","Group","router","getRoutingService","Home","copy","dest0","dest1","dest2","dest3","setLocation","setOrder","setLoading","distance","route","counter","j","onResult","a","routes","response","sections","calcDistance","summary","linestring","geo","LineString","fromFlexiblePolyline","polyline","routeLine","Polyline","strokeColor","lineWidth","startMarker","Marker","departure","place","endMarker","arrival","addObjects","JSON","parse","stringify","pickShortestDistance","getAllDistances","Object","keys","forEach","element","insideEle","insideKey","delayed","from","to","orig","dest","calculateRoute","routingMode","transportMode","origin","position","destination","return","error","alert","message","findRoute","queue","delay","cb","push","processQueue","setTimeout","shift","dist","minNumber","minIndex","reduce","b","km","console","log","arg","showRoutes","removeAll","num","e","tempMarker","App","Boolean","hostname","match","require","config","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch"],"mappings":"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","file":"static/js/main.345d1d65.chunk.js","sourcesContent":["const dimensions = {\n  //pixels\n  maxwidthDesktop: 1100,\n  maxwidthTablet: 768,\n  maxwidthMobile: 700,\n\n  //ems\n  paddingHorizontalDesktop: 4,\n  paddingHorizontalTablet: 2.5,\n  paddingHorizontalMobile: 2,\n};\n\nexport default dimensions;\n","import React from \"react\";\nimport styled from \"styled-components\";\nimport dimensions from \"../styles/dimensions\";\n\nconst Body = styled.div`\n  max-width: ${dimensions.maxwidthDesktop}px;\n  margin: 0 auto;\n  margin-top: 2em;\n`;\n\nconst Layout = ({ children }) => {\n  return <Body>{children}</Body>;\n};\n\nexport default Layout;\n","// src/DisplayMapClass.js\nimport * as React from \"react\";\nimport { useState, useRef, useEffect } from \"react\";\n\nconst DisplayMapClass = ({ setMap, group, platform }) => {\n  const mapRef = useRef();\n\n  useEffect(() => {\n    const H = window.H;\n\n    const defaultLayers = platform.createDefaultLayers();\n\n    const map = new H.Map(mapRef.current, defaultLayers.vector.normal.map, {\n      center: { lat: 4.4255, lng: 114.01 },\n      zoom: 12,\n      pixelRatio: window.devicePixelRatio || 1,\n    });\n\n    // MapEvents enables the event system\n    // Behavior implements default interactions for pan/zoom (also on mobile touch environments)\n    // This variable is unused and is present for explanatory purposes\n    const behavior = new H.mapevents.Behavior(new H.mapevents.MapEvents(map));\n\n    // Create the default UI components to allow the user to interact with them\n    // This variable is unused\n    const ui = H.ui.UI.createDefault(map, defaultLayers);\n    setMap(map);\n\n    map.addObject(group);\n  }, []);\n\n  return <div ref={mapRef} style={{ height: \"500px\" }} />;\n};\n\nexport default DisplayMapClass;\n","import React, { useState, useRef, useEffect } from \"react\";\nimport styled from \"styled-components\";\n\nconst Input = styled.input`\n  width: 100%;\n  padding: 12px 20px;\n  height: 60px;\n  margin: 8px 0;\n  display: inline-block;\n  background-color: #ffffff;\n  border-radius: 5px;\n  border-width: 0px;\n  box-sizing: border-box;\n  font-size: 16px;\n  background-color: #f1f1f1;\n`;\n\nconst SuggestionContainer = styled.div`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  flex-direction: column;\n`;\n\nconst Option = styled.div`\n  width: 100%;\n  display: flex;\n  box-sizing: border-box;\n\n  padding: 5px;\n`;\n\nconst Autosearch = ({ placeholder, id, handleLocation }) => {\n  const [display, setDisplay] = useState(false);\n  const [input, setInput] = useState(\"\");\n  const [suggestion, setSuggestion] = useState([]);\n  const wrapperRef = useRef(null);\n\n  const H = window.H;\n  const platform = new H.service.Platform({\n    apikey: process.env.REACT_APP_HERE_API_KEY,\n  });\n  var service = platform.getSearchService();\n\n  const handleClickOutside = (event) => {\n    const { current: wrap } = wrapperRef;\n    if (wrap && !wrap.contains(event.target)) {\n      setDisplay(false);\n    }\n  };\n  useEffect(() => {\n    window.addEventListener(\"mousedown\", handleClickOutside);\n    return () => {\n      window.removeEventListener(\"mousedown\", handleClickOutside);\n    };\n  });\n\n  const handleSearch = (event) => {\n    event.preventDefault();\n    setDisplay(true);\n    setInput(event.target.value);\n    if (event.target.value.length > 0) {\n      service.autosuggest(\n        {\n          // Search query\n          q: event.target.value,\n          // Center of the search context\n          at: \"4.4255,114.01\",\n        },\n        (result) => {\n          // Assumption: ui is instantiated\n          // Create an InfoBubble at the returned location\n          // ui.addBubble(new H.ui.InfoBubble(position, {\n          //   content: title\n          // }));\n\n          setSuggestion(result.items);\n        }\n        //alert\n      );\n    }\n  };\n\n  const handleSelect = (value) => {\n    setInput(value.title);\n    handleLocation(id, value);\n    setDisplay(false);\n  };\n\n  return (\n    <div ref={wrapperRef}>\n      <Input\n        id={id}\n        onClick={() => setDisplay(!display)}\n        onChange={(event) => handleSearch(event)}\n        value={input}\n        placeholder={placeholder}\n        type=\"text\"\n      />\n      {display && (\n        <SuggestionContainer>\n          {suggestion.map((value, index) => {\n            return (\n              <Option onClick={() => handleSelect(value)} key={index}>\n                <p>{value.title}</p>\n              </Option>\n            );\n          })}\n        </SuggestionContainer>\n      )}\n    </div>\n  );\n};\n\nexport default Autosearch;\n","import React, { useState } from \"react\";\nimport styled from \"styled-components\";\nimport Autosearch from \"./Autosearch\";\n\nconst Submit = styled.input`\n  width: 100%;\n  height: 30px;\n  background-color: #ccc;\n`;\nconst GetPath = styled.button`\n  margin-top: 1em;\n  width: 100%;\n  height: 30px;\n  background-color: #ccc;\n`;\n\nconst InputPanel = ({\n  handleLocation,\n  handleSubmit,\n  handleDisplayPath,\n  loading,\n  location,\n  order,\n}) => {\n  return (\n    <div>\n      <form onSubmit={handleSubmit}>\n        <Autosearch\n          placeholder=\"Type Home address\"\n          handleLocation={handleLocation}\n          id=\"dest0\"\n        />\n        <Autosearch\n          placeholder=\"Destination address #1\"\n          id=\"dest1\"\n          handleLocation={handleLocation}\n        />\n        <Autosearch\n          placeholder=\"Destination address #2\"\n          id=\"dest2\"\n          handleLocation={handleLocation}\n        />\n        <Autosearch\n          placeholder=\"Destination address #3\"\n          id=\"dest3\"\n          handleLocation={handleLocation}\n        />\n        <Submit type=\"submit\" value=\"Show in Map\"></Submit>\n      </form>\n      <GetPath onClick={handleDisplayPath}>\n        {loading ? \"Calculating...\" : \"Optimise Path\"}\n      </GetPath>\n\n      <div>\n        <h4>Optimised Path: </h4>\n        {order.map((index, i) => {\n          return (\n            <p key={i}>\n              {i + 1}: {location[`dest${index}`].title}\n            </p>\n          );\n        })}\n      </div>\n    </div>\n  );\n};\n\nexport default InputPanel;\n\n/**\n * Input panel takes in the following parameters\n * - Home point\n * - Destination(s)\n *\n * Task 1: Create the UI for input of home point & destination\n * Task 2: Implement geocoding to locate the home point & destinations on a map\n * Task 3: Place markers on the identified locations\n * Task 4: Find the path from each locations to one another\n * Task 5: Create the optimisation algorithm that produce the optimal path for a round trip\n *\n * END\n *\n */\n","import React, { useState, useEffect } from \"react\";\nimport styled from \"styled-components\";\nimport Layout from \"../component/Layout\";\nimport Map from \"../component/Map\";\nimport InputPanel from \"../component/InputPanel\";\n\nconst Grid = styled.div`\n  display: grid;\n  grid-template-columns: 1fr 1fr;\n  column-gap: 1em;\n`;\nconst H = window.H;\nconst platform = new H.service.Platform({\n  apikey: process.env.REACT_APP_HERE_API_KEY,\n});\nlet group = new H.map.Group();\nlet router = platform.getRoutingService(null, 8);\n\nconst Home = () => {\n  const [location, setLocation] = useState({\n    dest0: {},\n    dest1: {},\n    dest2: {},\n    dest3: {},\n  });\n  const [order, setOrder] = useState([0]);\n  const [loading, setLoading] = useState(false);\n\n  var distance = [[], [], [], []];\n  var route = [[], [], [], []];\n  let copy;\n  let counter = 0;\n\n  let i = 0;\n  let j = 0;\n  const [map, setMap] = useState(null);\n\n  /*Stores the searched location */\n  const handleLocation = (id, value) => {\n    setLocation({ ...location, [id]: value });\n    console.log(value);\n  };\n\n  /* To show markers on the map */\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    group.removeAll();\n    Object.keys(location).forEach((key) => {\n      if (Object.keys(location[key]).length > 0) {\n        let tempMarker = new H.map.Marker(location[key].position);\n        group.addObject(tempMarker);\n      }\n    });\n  };\n\n  /* Routing parameters*/\n  const pathingRequest = (orig, dest) => {\n    return {\n      routingMode: \"fast\",\n      transportMode: \"car\",\n      // The start point of the route:\n      origin: `${orig.position.lat},${orig.position.lng}`,\n      // The end point of the route:\n      destination: `${dest.position.lat},${dest.position.lng}`,\n      // Include the route shape in the response\n      return: [\"polyline\", \"summary\"],\n    };\n  };\n\n  const findRoute = (from, to) => {\n    router.calculateRoute(pathingRequest(from, to), onResult, function (error) {\n      alert(error.message);\n    });\n  };\n\n  // Define a callback function to process the routing response:\n  let onResult = async (result) => {\n    // ensure that at least one route was found\n\n    if (result.routes.length) {\n      let response = result.routes[0].sections[0];\n\n      let calcDistance = response.summary.length;\n\n      /* Draw the route */\n      let linestring = H.geo.LineString.fromFlexiblePolyline(response.polyline);\n      let routeLine = new H.map.Polyline(linestring, {\n        style: { strokeColor: \"blue\", lineWidth: 3 },\n      });\n\n      /* Draw the markers */\n      let startMarker = new H.map.Marker(response.departure.place.location);\n      let endMarker = new H.map.Marker(response.arrival.place.location);\n      /* Uncomment below to add to map */\n      group.addObjects([routeLine, startMarker, endMarker]);\n\n      distance[i][j] = calcDistance;\n      route[i][j] = [routeLine, startMarker, endMarker];\n\n      if (j >= 3) {\n        i++;\n        j = 0;\n      } else {\n        j++;\n      }\n      counter++;\n\n      if (counter === 16) {\n        copy = JSON.parse(JSON.stringify(distance));\n        pickShortestDistance(distance[0]);\n      }\n    }\n  };\n\n  const getAllDistances = () => {\n    Object.keys(location).forEach((element, key) => {\n      Object.keys(location).forEach((insideEle, insideKey) => {\n        delayed(\n          1000,\n          (function (key, insideKey) {\n            return function () {\n              findRoute(location[element], location[insideEle]);\n            };\n          })(key, insideKey)\n        );\n      });\n    });\n  };\n\n  var delayed = (function () {\n    var queue = [];\n\n    function processQueue() {\n      if (queue.length > 0) {\n        setTimeout(function () {\n          queue.shift().cb();\n          processQueue();\n        }, queue[0].delay);\n      }\n    }\n\n    return function delayed(delay, cb) {\n      queue.push({ delay: delay, cb: cb });\n\n      if (queue.length === 1) {\n        processQueue();\n      }\n    };\n  })();\n\n  const pickShortestDistance = (dist) => {\n    let minNumber = 50000; // extreme large number for comparison\n    let minIndex = 50000; // extreme large number for comparison\n\n    let sum = dist.reduce((a, b) => {\n      return a + b;\n    }, 0);\n\n    if (sum > 0) {\n      dist.forEach((km, i) => {\n        if (km !== 0) {\n          if (km < minNumber) {\n            minNumber = km;\n            minIndex = i;\n          }\n        }\n      });\n      console.log(minNumber, minIndex);\n\n      copy.forEach((arg, i) => {\n        copy[i][0] = 0;\n        copy[i][minIndex] = 0;\n      });\n\n      setOrder((order) => [...order, minIndex]);\n      pickShortestDistance(copy[minIndex]);\n    } else {\n      console.log(\"end\");\n      console.log(distance);\n      showRoutes();\n    }\n  };\n\n  const showRoutes = () => {\n    setLoading(false);\n    group.removeAll();\n    order.forEach((num, i) => {\n      group.addObjects(route[i][num]);\n    });\n  };\n\n  const handleDisplayPath = () => {\n    getAllDistances();\n    setOrder(() => []);\n    group.removeAll();\n\n    setLoading(true);\n  };\n\n  return (\n    <Layout>\n      <Grid>\n        <Map setMap={setMap} group={group} platform={platform} />\n        <InputPanel\n          handleLocation={handleLocation}\n          handleSubmit={handleSubmit}\n          handleDisplayPath={handleDisplayPath}\n          loading={loading}\n          location={location}\n          order={order}\n        />\n      </Grid>\n    </Layout>\n  );\n};\n\nexport default Home;\n","import React from \"react\";\nimport Home from \"./pages\";\n// require(\"dotenv\").config();\n\nconst App = () => {\n  return <Home />;\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nrequire(\"dotenv\").config();\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}